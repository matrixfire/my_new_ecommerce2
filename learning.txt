Objective:
Your online shop will enable clients to browse products, add them to the cart, apply discount codes, go through the checkout process, pay with a credit card, and obtain an invoice.
You will also implement a recommendation engine to recommend products to your customers, and you will use internationalization to offer your site in multiple languages.



Create a product catalog
Build a shopping cart using Django sessions
Create custom context processors
Manage customer orders
Configure Celery in your project with RabbitMQ as a message broker
Send asynchronous notifications to customers using Celery
Monitor Celery using Flower
Integrate the Stripe payment gateway into your project
Process credit card payments with Stripe
Handle payment notifications
Export orders to CSV files
Create custom views for the administration site
Generate PDF invoices dynamically
Creating a coupon system
Applying coupons to the shopping cart
Applying coupons to orders
Creating coupons for Stripe Checkout
Storing products that are usually bought together
Building a product recommendation engine with Redis
Preparing your project for internationalization
Managing translation files
Translating Python code
Translating templates
Using Rosetta to manage translations
Translating URL patterns and using a language prefix in URLs
Allowing users to switch language
Translating models using django-parler
Using translations with the ORM
Adapting views to use translations
Using localized form fields of django-localflavor














How I do it:

1, 



INSTALLED_APPS = [
    ...
    'shop.apps.ShopConfig',
]




 索引能够提升数据的检索速度可以在表的各个字段上设置索引（Index），这也是DBMS所具备的功能之一。虽然索引和键这两个概念容易让人混淆，但其实两者是完全不同的。索引仅仅是提升数据检索和排序速度的内部机制。一旦在字段上设置了索引，DBMS就会自动为这个字段创建索引表（如图8.12所示）。[插图]图8.12 设置索引索引表是一种数据结构，存储着字段的值以及字段所对应记录的位置。例如，如果在顾客表的顾客姓名字段上设置了索引，DBMS就会创建一张索引表（如图8.13所示），表中有两个字段，分别存储着顾客姓名和位置（所对应的记录在数据文件中的位置）。与原来的顾客表相比，索引表中的字段数更少，所以可以更快地进行数据的检索和排序。当查询数据时，DBMS先在索引表中进行数据的检索和排序，然后再根据位置信息从原来的数据表中把完整的记录取出来。索引所起的就是“目录”的作用。与图书的目录一样，数据库的索引也是一种能够高效地查找目标数据的机制。[插图]图8.13 如果字段上有索引就可以缩短检索时间也许会有人这样想，既然索引能够提升检索和排序的速度，那么在所有表的所有字段上都加上索引不就好了吗？实际上并不能这样做。因为一旦设置了索引，每次向表中插入数据时，DBMS都必须更新索引表。提升数据检索和排序速度的代价，就是插入或更新数据速度的降低。因此，只有对那些要频繁地进行检索和排序的字段，才需要设置索引。
 在酒铺数据库这个例子中，只需要在顾客表的顾客姓名字段和商品表的商品名称字段上设置索引就足够了。如果表中充其量也就只有几千条记录，那么即使完全不使用索引，也不会感到检索或排序速度有多慢。

 For the price field, we use DecimalField instead of FloatField to avoid rounding issues.
 Always use DecimalField to store monetary amounts. FloatField uses Python’s float type internally, whereas DecimalField uses Python’s Decimal type. By using the Decimal type, you will avoid float rounding issues.



